
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_0_console.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_0_console.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_0_console.py:


Linear Elastostatics of a Console in 1d
=======================================

.. GENERATED FROM PYTHON SOURCE LINES 8-9

A short comparison of different modeling techniques of a simple console. The beam has a rectangular prismatic cross-section and a linear elastic material model, governed by the following parameters:

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: python3

    L = 100.  # length of the console
    w, h = 10., 10.  # width and height of the rectangular cross section
    F = -100.  # value of the vertical load at the free end
    E = 210000.0  # Young's modulus
    nu = 0.3  # Poisson's ratio









.. GENERATED FROM PYTHON SOURCE LINES 19-20

The resistance of a rectangular section can be characterized by the following constants (the cross section lies in the y-z plane):

.. GENERATED FROM PYTHON SOURCE LINES 22-23

cross section

.. GENERATED FROM PYTHON SOURCE LINES 23-29

.. code-block:: python3

    A = w * h  # area
    Iy = w * h**3 / 12  # second moment of inertia around the y axis
    Iz = w * h**3 / 12  # second moment of inertia around the z axis
    Ix = Iy + Iz  # torsional inertia









.. GENERATED FROM PYTHON SOURCE LINES 30-31

# 1d Solution - Exact Analytical

.. GENERATED FROM PYTHON SOURCE LINES 33-34

Analytic solution for the tip displacement of an 1d Euler-Bernoulli beam:

.. GENERATED FROM PYTHON SOURCE LINES 36-37

Bernoulli solution

.. GENERATED FROM PYTHON SOURCE LINES 37-44

.. code-block:: python3

    import numpy as np
    EI = E * Iy
    sol_exact = F * L**3 / (3 * EI)
    tol = np.abs(sol_exact / 1000)
    sol_exact






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -0.19047619047619047



.. GENERATED FROM PYTHON SOURCE LINES 45-46

# 1d Solution - Approximate Numerical

.. GENERATED FROM PYTHON SOURCE LINES 48-106

.. code-block:: python3

    from sigmaepsilon.solid import Structure, LineMesh, PointData
    from neumann.linalg import linspace, Vector
    from polymesh.space import StandardFrame, PointCloud, frames_of_lines
    from sigmaepsilon.solid.fem.cells import B2 as Beam

    import numpy as np

    # model stiffness matrix
    G = E / (2 * (1 + nu))
    Hooke = np.array([
        [E*A, 0, 0, 0],
        [0, G*Ix, 0, 0],
        [0, 0, E*Iy, 0],
        [0, 0, 0, E*Iz]
    ])

    # space
    GlobalFrame = StandardFrame(dim=3)

    # mesh
    nElem = 20  # number of finite elements to use
    p0 = np.array([0., 0., 0.])
    p1 = np.array([L, 0., 0.])
    coords = linspace(p0, p1, nElem+1)
    coords = PointCloud(coords, frame=GlobalFrame).show()
    topo = np.zeros((nElem, 2), dtype=int)
    topo[:, 0] = np.arange(nElem)
    topo[:, 1] = np.arange(nElem) + 1

    # support at the leftmost, load at the rightmost node
    loads = np.zeros((coords.shape[0], 6))
    fixity = np.zeros((coords.shape[0], 6)).astype(bool)
    global_load_vector = Vector([0., 0, F], frame=GlobalFrame).show()
    loads[-1, :3] = global_load_vector
    fixity[0, :] = True

    # pointdata
    pd = PointData(coords=coords, frame=GlobalFrame,
                   loads=loads, fixity=fixity)

    # celldata
    frames = frames_of_lines(coords, topo)
    cd = Beam(topo=topo, frames=frames)

    # set up mesh and structure
    mesh = LineMesh(pd, cd, model=Hooke, frame=GlobalFrame)
    structure = Structure(mesh=mesh)
    structure.linsolve()

    # postproc
    # 1) displace the mesh
    structure.nodal_dof_solution(store='dofsol')
    dofsol = structure.mesh.pd['dofsol'].to_numpy()[:, :3]
    local_dof_solution = dofsol[-1, :3]
    sol_fem_1d_B2 = local_dof_solution[2]
    sol_fem_1d_B2






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    -0.19047719057503856



.. GENERATED FROM PYTHON SOURCE LINES 107-111

.. code-block:: python3

    mesh.config['pyvista', 'plot', 'scalars'] = dofsol[:, 2]
    mesh.config['pyvista', 'plot', 'line_width'] = 4
    mesh.pvplot(notebook=True, jupyter_backend='static', window_size=(600, 400),
                config_key=('pyvista', 'plot'), cmap='plasma')



.. image-sg:: /auto_examples/images/sphx_glr_plot_0_console_001.png
   :alt: plot 0 console
   :srcset: /auto_examples/images/sphx_glr_plot_0_console_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <PIL.Image.Image image mode=RGB size=600x400 at 0x1579C98E6A0>





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  6.926 seconds)

**Estimated memory usage:**  331 MB


.. _sphx_glr_download_auto_examples_plot_0_console.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_0_console.py <plot_0_console.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_0_console.ipynb <plot_0_console.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
