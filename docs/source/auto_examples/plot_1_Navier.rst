
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_1_Navier.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_1_Navier.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_1_Navier.py:


Navier's Solution to Simply-Supported Plates
============================================

.. GENERATED FROM PYTHON SOURCE LINES 8-23

.. code-block:: python3

    import numpy as np
    from dewloosh.mpl.triplot import triplot
    from polymesh import PolyData
    from polymesh.grid import grid
    from polymesh.tri.trimesh import triangulate
    from polymesh.topo.tr import Q4_to_T3
    import matplotlib.pyplot as plt
    from matplotlib import gridspec
    plt.style.use('default')

    size = Lx, Ly = (600., 800.)
    E = 2890.
    nu = 0.2
    t = 25.0








.. GENERATED FROM PYTHON SOURCE LINES 24-25

Set up a material model

.. GENERATED FROM PYTHON SOURCE LINES 25-29

.. code-block:: python3

    G = E/2/(1+nu)
    D = np.array([[1, nu, 0], [nu, 1, 0], [0., 0, (1-nu)/2]]) * t**3 * (E / (1-nu**2)) / 12
    S = np.array([[G, 0], [0, G]]) * t * 5 / 6








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Define some loads

.. GENERATED FROM PYTHON SOURCE LINES 31-59

.. code-block:: python3

    loads = {
            'LG1' : {
                'LC1' : {
                    'type' : 'rect',
                    'points' : [[0, 0], [Lx, Ly]],
                    'value' : [0, 0, -0.01],
                        },
                'LC2' : {
                    'type' : 'rect',
                    'region' : [0.2*Lx, 0.5*Ly, 0.2*Lx, 0.3*Ly],
                    'value' : [0, 0, -100],
                        }
                    },
            'LG2' : {
                'LC3' : {
                    'type' : 'point',
                    'point' : [Lx/3, Ly/2],
                    'value' : [0, 0, -10],
                        },
                'LC4' : {
                    'type' : 'point',
                    'point' : [2*Lx/3, Ly/2],
                    'value' : [0, 0, 10],
                        }
                    },
            'dummy1' : 10
                }








.. GENERATED FROM PYTHON SOURCE LINES 60-61

Solve the problem

.. GENERATED FROM PYTHON SOURCE LINES 61-67

.. code-block:: python3

    from sigmaepsilon.solid.fourier import RectangularPlate

    Problem = RectangularPlate(size, (50, 50), D=D, S=S, model='kirchhoff')
    Loads = Problem.add_loads_from_dict(loads)
    Problem.solve()








.. GENERATED FROM PYTHON SOURCE LINES 68-88

.. code-block:: python3



    shape = nx, ny = (30, 40)
    gridparams = {
        'size' : size,
        'shape' : shape,
        'origo' : (0, 0),
        'start' : 0,
        'eshape' : 'Q4'
        }
    coords_, topo = grid(**gridparams)
    coords = np.zeros((coords_.shape[0], 3))
    coords[:, :2] = coords_[:, :]
    del coords_
    coords, triangles = Q4_to_T3(coords, topo)

    triobj = triangulate(points=coords[:, :2], triangles=triangles)[-1]
    Mesh = PolyData(coords=coords, topo=triangles)
    centers = Mesh.centers()








.. GENERATED FROM PYTHON SOURCE LINES 89-91

.. code-block:: python3

    Problem.postproc(centers[:, :2], cleanup=False)








.. GENERATED FROM PYTHON SOURCE LINES 92-97

.. code-block:: python3

    UZ, ROTX, ROTY, CX, CY, CXY, EXZ, EYZ, MX, MY, MXY, QX, QY = list(range(13))
    labels = {UZ : 'UZ', ROTX : 'ROTX', ROTY : 'ROTY', CX : 'CX', 
              CY : 'CY', CXY : 'CXY', EXZ : 'EXZ', EYZ : 'EYZ', 
              MX : 'MX', MY : 'MY', MXY : 'MXY', QX : 'QX', QY : 'QY'}








.. GENERATED FROM PYTHON SOURCE LINES 98-100

.. code-block:: python3

    res2d = Loads['LG1', 'LC1'].res2d








.. GENERATED FROM PYTHON SOURCE LINES 101-122

.. code-block:: python3

    fig = plt.figure(figsize=(8, 3))  # in inches
    fig.patch.set_facecolor('white')
    cmap = 'jet'
    gs = gridspec.GridSpec(1, 3)
    for i, key in enumerate([UZ, ROTX, ROTY]):
        ax = fig.add_subplot(gs[i])
        triplot(triobj, ax=ax, fig=fig, title=labels[key],
                data=res2d[key, :], cmap=cmap, axis='off')
    fig.tight_layout()

    fig = plt.figure(figsize=(12, 3))  # in inches
    fig.patch.set_facecolor('white')
    cmap = 'seismic'
    gs = gridspec.GridSpec(1, 5)
    for i, key in enumerate([MX, MY, MXY, QX, QY]):
        ax = fig.add_subplot(gs[i])
        triplot(triobj, ax=ax, fig=fig, title=labels[key],
                data=res2d[key, :], cmap=cmap, axis='off')
    fig.tight_layout()





.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_1_Navier_001.png
         :alt: UZ, ROTX, ROTY
         :srcset: /auto_examples/images/sphx_glr_plot_1_Navier_001.png, /auto_examples/images/sphx_glr_plot_1_Navier_001_2_0x.png 2.0x
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_1_Navier_002.png
         :alt: MX, MY, MXY, QX, QY
         :srcset: /auto_examples/images/sphx_glr_plot_1_Navier_002.png, /auto_examples/images/sphx_glr_plot_1_Navier_002_2_0x.png 2.0x
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  41.821 seconds)

**Estimated memory usage:**  2397 MB


.. _sphx_glr_download_auto_examples_plot_1_Navier.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_1_Navier.py <plot_1_Navier.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_1_Navier.ipynb <plot_1_Navier.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
